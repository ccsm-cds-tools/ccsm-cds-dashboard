import { AutogeneratedRiskTables } from "./AutogeneratedRiskTables.mjs";
import { AutogeneratedTableLookup } from "./AutogeneratedTableLookup.mjs";
import { CCSMCommonFunctions } from "./CCSMCommonFunctions.mjs";
import { CDSConnectCommonsforFHIRv401 } from "./CDSConnectCommonsforFHIRv401.mjs";
import { CollateManagementData } from "./CollateManagementData.mjs";
import { DashboardLibrary } from "./DashboardLibrary.mjs";
import { FHIRHelpersv401 } from "./FHIRHelpers-4.0.1.mjs";
import { ManagementLibrary } from "./ManagementLibrary.mjs";
import { ManageCommonAbnormality } from "./ManageCommonAbnormality.mjs";
import { ManageRareAbnormality } from "./ManageRareAbnormality.mjs";
import { ManageSpecialPopulation } from "./ManageSpecialPopulation.mjs";
import { OrderSetLibrary } from "./OrderSetLibrary.mjs";
import { ScreeningAverageRiskLibrary } from "./ScreeningAverageRiskLibrary.mjs";
import { ScreeningDesExposureLibrary } from "./ScreeningDesExposureLibrary.mjs";
import { ScreeningImmunocompromisedLibrary } from "./ScreeningImmunocompromisedLibrary.mjs";
import { ScreeningSymptomaticLibrary } from "./ScreeningSymptomaticLibrary.mjs";
import { ScreeningLibrary } from "./ScreeningLibrary.mjs";

const elmJsonDependencyArray = [
  AutogeneratedRiskTables,
  AutogeneratedTableLookup,
  CCSMCommonFunctions,
  CDSConnectCommonsforFHIRv401,
  CollateManagementData,
  DashboardLibrary,
  FHIRHelpersv401,
  ManagementLibrary,
  ManageCommonAbnormality,
  ManageRareAbnormality,
  ManageSpecialPopulation,
  OrderSetLibrary,
  ScreeningAverageRiskLibrary,
  ScreeningDesExposureLibrary,
  ScreeningImmunocompromisedLibrary,
  ScreeningSymptomaticLibrary,
  ScreeningLibrary
];

// Reformat ELM JSON value set references to match what is expected by the 
// code service built into the cql execution engine.
// NOTE: This is needed since we are not using `cql-exec-vsac`.
export const elmJsonDependencies = elmJsonDependencyArray.reduce((acc, elm) => {
  let refs = elm?.library?.valueSets?.def;
  if (refs) {
    refs = refs.map(r => {
      return {
        ...r,
        id: r.id.split('/').pop()
      }
    });
    elm.library.valueSets.def = refs;
  }
  return {
    ...acc,
    [elm.library.identifier.id]: elm
  }
}, {});